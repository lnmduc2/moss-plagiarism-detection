//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace MossApp.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("MossApp.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the directory / files that you want to use as Base Files..
        /// </summary>
        internal static string BaseFile_Dialog_Description {
            get {
                return ResourceManager.GetString("BaseFile_Dialog_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to registeruser 
        ///mail .
        /// </summary>
        internal static string Email_Clip_Board {
            get {
                return ResourceManager.GetString("Email_Clip_Board", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Email moss@moss.stanford.edu - The text below (it should appear exactly as follows)
        ///
        ///registeruser 
        ///mail .
        /// </summary>
        internal static string Email_Moss_ID_Request {
            get {
                return ResourceManager.GetString("Email_Moss_ID_Request", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You must select source files.
        /// </summary>
        internal static string File_List_Empty_Error {
            get {
                return ResourceManager.GetString("File_List_Empty_Error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Base File(s).
        /// </summary>
        internal static string FileList_BaseFiles {
            get {
                return ResourceManager.GetString("FileList_BaseFiles", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Source File(s).
        /// </summary>
        internal static string FileList_SourceFile {
            get {
                return ResourceManager.GetString("FileList_SourceFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0}{1}.
        /// </summary>
        internal static string Moss_Email_Format_String {
            get {
                return ResourceManager.GetString("Moss_Email_Format_String", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not a valid response URL.
        /// </summary>
        internal static string Moss_Request_URI_Error {
            get {
                return ResourceManager.GetString("Moss_Request_URI_Error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Moss is being provided in the hope that it will benefit the educational community. Moss is fast, easy to use, and free. In the past, access has been restricted to instructors and staff of programming courses. This is no longer the case, and anyone may obtain a Moss account.
        ///However, Moss is for non-commercial use. If you are interested in commercial uses of Moss, contact Similix Corporation.
        ///
        ///To obtain a Moss account, send a mail message to moss@moss.stanford.edu. The body of the message should appear ex [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Moss_Requesting_Instructions {
            get {
                return ResourceManager.GetString("Moss_Requesting_Instructions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ++ The -b option names a &quot;base file&quot;.  Moss normally reports all code 
        ///that matches in pairs of files.  When a base file is supplied, 
        ///program code that also appears in the base file is not counted in matches. 
        ///A typical base file will include, for example, the instructor-supplied 
        ///code for an assignment.  Multiple -b options are allowed.  You should use a base file if it is 
        ///convenient; base files improve results, but are not usually necessary for obtaining useful information. .
        /// </summary>
        internal static string Option_B_Tool_Tip {
            get {
                return ResourceManager.GetString("Option_B_Tool_Tip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ++ Represents the -x option sends queries to the current experimental version of the server. 
        ///The experimental server has the most recent Moss features and is also usually 
        ///less stable (read: may have more bugs)..
        /// </summary>
        internal static string Option_Beta_Tool_Tip {
            get {
                return ResourceManager.GetString("Option_Beta_Tool_Tip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ++ The -c option supplies a comment string that is attached to the generated 
        ///report.  This option facilitates matching queries submitted with replies 
        ///received, especially when several queries are submitted at once..
        /// </summary>
        internal static string Option_C_Tool_Tip {
            get {
                return ResourceManager.GetString("Option_C_Tool_Tip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ++ The -d option specifies that submissions are by directory, not by file. 
        ///That is, files in a directory are taken to be part of the same program, 
        ///and reported matches are organized accordingly by directory..
        /// </summary>
        internal static string Option_D_Tool_Tip {
            get {
                return ResourceManager.GetString("Option_D_Tool_Tip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to ++ The -m option sets the maximum number of times a given passage may appear 
        ///before it is ignored.  A passage of code that appears in many programs 
        ///is probably legitimate sharing and not the result of plagiarism.  With -m N, 
        ///any passage appearing in more than N programs is treated as if it appeared in 
        ///a base file (i.e., it is never reported).  Option -m can be used to control 
        ///moss&apos; sensitivity.  With -m 2, moss reports only passages that appear 
        ///in exactly two programs.  If one expects many very  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string Option_M_Tool_Tip {
            get {
                return ResourceManager.GetString("Option_M_Tool_Tip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The -n option determines the number of matching files to show in the results. 
        ///The default is 250..
        /// </summary>
        internal static string Option_N_Tool_Tip {
            get {
                return ResourceManager.GetString("Option_N_Tool_Tip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Option M must be a positive number.
        /// </summary>
        internal static string OptionM_Error {
            get {
                return ResourceManager.GetString("OptionM_Error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Option N must be a positive number.
        /// </summary>
        internal static string OptionN_Error {
            get {
                return ResourceManager.GetString("OptionN_Error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An error occured.
        /// </summary>
        internal static string Request_Error_Caption {
            get {
                return ResourceManager.GetString("Request_Error_Caption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enter a list of accepted extensions (with dot),
        ///for example: .cpp,.cc,.hpp.
        /// </summary>
        internal static string Restrict_Files_Instructions {
            get {
                return ResourceManager.GetString("Restrict_Files_Instructions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Select the directory / files that you want to use as Source Files..
        /// </summary>
        internal static string SourceFile_Dialog_Description {
            get {
                return ResourceManager.GetString("SourceFile_Dialog_Description", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Hover over each Option Label
        /// for information about the option. .
        /// </summary>
        internal static string Tool_Tip_Insructions {
            get {
                return ResourceManager.GetString("Tool_Tip_Insructions", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You do not have access to those files / folders..
        /// </summary>
        internal static string Unauthorized_Access_Error {
            get {
                return ResourceManager.GetString("Unauthorized_Access_Error", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unauthorized Access Error.
        /// </summary>
        internal static string Unauthorized_Access_Error_Caption {
            get {
                return ResourceManager.GetString("Unauthorized_Access_Error_Caption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to For information on how to get a MOSS UserID
        ///Look under the Get User Id Tab.
        /// </summary>
        internal static string User_Id_Tool_Tip {
            get {
                return ResourceManager.GetString("User_Id_Tool_Tip", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to User Id must be a number.
        /// </summary>
        internal static string UserId_Error {
            get {
                return ResourceManager.GetString("UserId_Error", resourceCulture);
            }
        }
    }
}
